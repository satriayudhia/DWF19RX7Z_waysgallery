[{"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\index.js":"1","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\App.js":"2","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\reportWebVitals.js":"3","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\Gap\\index.js":"4","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\config\\FormikControl\\index.js":"5","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\Input\\index.js":"6","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\TextArea\\index.js":"7","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\TextError\\index.js":"8","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\config\\API\\index.js":"9","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\molecules\\Header\\index.js":"10","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\EditProfile\\index.js":"11","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\Dropzone\\index.js":"12","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\config\\Context\\index.js":"13","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\Loading\\index.js":"14","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\Button\\index.js":"15","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\molecules\\Content\\index.js":"16","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\DetailPost\\index.js":"17","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\molecules\\HeaderDetail\\index.js":"18","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\molecules\\ContentDetail\\index.js":"19","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\DatePicker\\index.js":"20","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\Profile\\index.js":"21","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\Landing\\index.js":"22","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\Home\\index.js":"23","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\AddPost\\index.js":"24","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\Transaction\\index.js":"25","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\Hired\\index.js":"26","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\AddProject\\index.js":"27","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\ViewProject\\index.js":"28"},{"size":573,"mtime":1608096573175,"results":"29","hashOfConfig":"30"},{"size":1267,"mtime":1608435779747,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":1606196768648,"results":"32","hashOfConfig":"30"},{"size":110,"mtime":1607991903567,"results":"33","hashOfConfig":"30"},{"size":577,"mtime":1608292901071,"results":"34","hashOfConfig":"30"},{"size":381,"mtime":1607993158024,"results":"35","hashOfConfig":"30"},{"size":401,"mtime":1607993201908,"results":"36","hashOfConfig":"30"},{"size":156,"mtime":1607993139424,"results":"37","hashOfConfig":"30"},{"size":324,"mtime":1608192520466,"results":"38","hashOfConfig":"30"},{"size":3941,"mtime":1608607380009,"results":"39","hashOfConfig":"30"},{"size":8902,"mtime":1608561314377,"results":"40","hashOfConfig":"30"},{"size":1178,"mtime":1608021778189,"results":"41","hashOfConfig":"30"},{"size":833,"mtime":1608039656672,"results":"42","hashOfConfig":"30"},{"size":218,"mtime":1608136661943,"results":"43","hashOfConfig":"30"},{"size":201,"mtime":1608140804749,"results":"44","hashOfConfig":"30"},{"size":2860,"mtime":1608607178710,"results":"45","hashOfConfig":"30"},{"size":1765,"mtime":1608607359110,"results":"46","hashOfConfig":"30"},{"size":3795,"mtime":1608607395458,"results":"47","hashOfConfig":"30"},{"size":1816,"mtime":1608436870022,"results":"48","hashOfConfig":"30"},{"size":968,"mtime":1608295133992,"results":"49","hashOfConfig":"30"},{"size":5187,"mtime":1608607449376,"results":"50","hashOfConfig":"30"},{"size":11467,"mtime":1608484350518,"results":"51","hashOfConfig":"30"},{"size":3930,"mtime":1608506795132,"results":"52","hashOfConfig":"30"},{"size":7869,"mtime":1608559260335,"results":"53","hashOfConfig":"30"},{"size":15699,"mtime":1608615192893,"results":"54","hashOfConfig":"30"},{"size":5276,"mtime":1608481804864,"results":"55","hashOfConfig":"30"},{"size":7571,"mtime":1608613197725,"results":"56","hashOfConfig":"30"},{"size":4656,"mtime":1608475142676,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1wpu58e",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"60"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"60"},"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\index.js",[],["131","132"],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\App.js",[],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\reportWebVitals.js",[],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\Gap\\index.js",[],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\config\\FormikControl\\index.js",[],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\Input\\index.js",[],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\TextArea\\index.js",[],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\TextError\\index.js",[],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\config\\API\\index.js",[],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\molecules\\Header\\index.js",["133","134"],"import { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Popover from \"react-bootstrap/Popover\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n//CSS\r\nimport \"./Header.scss\";\r\n\r\n//Components\r\nimport Logo from \"../../../assets/logos/logo.png\";\r\nimport { ReactComponent as ProfileButton } from \"../../../assets/logos/profile-btn.svg\";\r\nimport { ReactComponent as OrderButton } from \"../../../assets/logos/order-btn.svg\";\r\nimport { ReactComponent as LogoutButton } from \"../../../assets/logos/logout-btn.svg\";\r\n\r\n//Config\r\nimport { API, setAuthToken } from \"../../../config/API\";\r\n\r\nconst Header = () => {\r\n  const router = useHistory();\r\n  //Get UserInfo\r\n  const [userData, setUserData] = useState({});\r\n  const [img, setImg] = useState(\"\");\r\n\r\n  const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const getUser = async () => {\r\n    try {\r\n      setAuthToken(token);\r\n\r\n      const userInfo = await API.get(`/user-profile/${user.id}`);\r\n      console.log(\"user info\", userInfo);\r\n      setUserData(userInfo.data.user);\r\n      setImg(userInfo.data.user.profpic);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUser();\r\n  }, []);\r\n\r\n  const toHome = () => {\r\n    router.push(\"/home\");\r\n  };\r\n\r\n  const toProfile = () => {\r\n    router.push(`/profile/${user.id}`);\r\n    window.location.reload();\r\n  };\r\n\r\n  const toOrder = () => {\r\n    router.push(\"/transaction\");\r\n  };\r\n\r\n  const toLogin = () => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"userInfo\");\r\n    localStorage.removeItem(\"posts\");\r\n    router.push(\"/\");\r\n  };\r\n\r\n  const toUpload = () => {\r\n    router.push(\"/add-post\");\r\n  };\r\n\r\n  return !userData ? (\r\n    <p></p>\r\n  ) : (\r\n    <Container fluid>\r\n      <Row className=\"header-container\">\r\n        <Col className=\"logo-header-login\">\r\n          <img\r\n            src={Logo}\r\n            alt=\"waysgallery\"\r\n            className=\"logo-header-cursor\"\r\n            onClick={toHome}\r\n          />\r\n        </Col>\r\n        <Col className=\"profile-header\">\r\n          <Row>\r\n            <Col className=\"profile-header-right\">\r\n              <Button\r\n                variant=\"info\"\r\n                onClick={toUpload}\r\n                className=\"btn-upload-header\"\r\n              >\r\n                Upload\r\n              </Button>\r\n              <OverlayTrigger\r\n                trigger=\"click\"\r\n                key=\"bottom\"\r\n                placement=\"bottom\"\r\n                overlay={\r\n                  <Popover id={\"popover-positioned-bottom\"}>\r\n                    <Popover.Content>\r\n                      <ProfileButton\r\n                        onClick={toProfile}\r\n                        style={{ width: \"60%\", cursor: \"pointer\" }}\r\n                      />\r\n                    </Popover.Content>\r\n                    <Popover.Content>\r\n                      <OrderButton\r\n                        onClick={toOrder}\r\n                        style={{ width: \"60%\", cursor: \"pointer\" }}\r\n                      />\r\n                    </Popover.Content>\r\n                    <Popover.Content>\r\n                      <LogoutButton\r\n                        onClick={toLogin}\r\n                        style={{ width: \"60%\", cursor: \"pointer\" }}\r\n                      />\r\n                    </Popover.Content>\r\n                  </Popover>\r\n                }\r\n              >\r\n                <img src={img} className=\"avatar-header-login\" />\r\n                {/* <Avatar className=\"avatar-header\" /> */}\r\n              </OverlayTrigger>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\EditProfile\\index.js",["135","136","137","138","139","140","141","142","143","144","145","146"],"import { useState, useCallback } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Image } from \"cloudinary-react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\n//CSS\r\nimport \"./EditProfile.scss\";\r\n\r\n//Config\r\nimport { API, setAuthToken } from \"../../config/API\";\r\nimport FormikControl from \"../../config/FormikControl\";\r\n\r\n//Components\r\nimport Header from \"../../components/molecules/Header\";\r\nimport Gap from \"../../components/atoms/Gap\";\r\nimport { ReactComponent as Camera } from \"../../assets/logos/camera.svg\";\r\n\r\nconst EditProfile = () => {\r\n  const router = useHistory();\r\n  //Get UserInfo\r\n  const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  const token = localStorage.getItem(\"token\");\r\n  //State\r\n  const [profpic, setProfpic] = useState(undefined);\r\n  const [art, setArt] = useState({});\r\n  const [previewProfpic, setPreviewProfpic] = useState(\"\");\r\n  const [previewArt, setPreviewArt] = useState(\"\");\r\n  const [files, setFiles] = useState([]);\r\n  const [cloudFiles, setCloudFiles] = useState([]);\r\n  //Modal\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  //Initial State Formik\r\n  const initialValues = {\r\n    fullname: \"\",\r\n    greeting: \"\",\r\n  };\r\n\r\n  //Schema validation form\r\n  const validationSchema = Yup.object({\r\n    fullname: Yup.string(),\r\n    greeting: Yup.string(),\r\n  });\r\n\r\n  const onDrop = useCallback(async (acceptedFiles) => {\r\n    setLoading(true);\r\n    acceptedFiles.forEach(async (acceptedFile) => {\r\n      const body = new FormData();\r\n      body.append(\"file\", acceptedFile);\r\n      body.append(\"upload_preset\", \"satriayud\");\r\n      const response = await fetch(\r\n        \"https://api.cloudinary.com/v1_1/satria-img/image/upload\",\r\n        {\r\n          method: \"post\",\r\n          body,\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      const url = await data.secure_url;\r\n      setCloudFiles((old) => [...old, data]);\r\n\r\n      const arts = { photo: url };\r\n      await API.post(`/arts/${user.id}`, arts);\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  const handleFileUploadProfpic = async (e) => {\r\n    setProfpic(e.target.files[0]);\r\n    setPreviewProfpic(URL.createObjectURL(e.target.files[0]));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    console.log(\"success?\", e);\r\n    try {\r\n      if (profpic == undefined) {\r\n        setLoading(true);\r\n        const editUser = { greeting: e.greeting, fullname: e.fullname };\r\n        const db = await API.patch(`/user/${user.id}`, editUser);\r\n\r\n        setStatus();\r\n      } else if (profpic) {\r\n        setLoading(true);\r\n        const body = new FormData();\r\n        body.append(\"file\", profpic);\r\n        body.append(\"upload_preset\", \"satriayud\");\r\n        const response = await fetch(\r\n          \"https://api.cloudinary.com/v1_1/satria-img/image/upload\",\r\n          {\r\n            method: \"post\",\r\n            body,\r\n          }\r\n        );\r\n\r\n        const data = await response.json();\r\n        const url = await data.secure_url;\r\n\r\n        const editUser = {\r\n          greeting: e.greeting,\r\n          fullname: e.fullname,\r\n          profpic: url,\r\n        };\r\n        await API.patch(`/user/${user.id}`, editUser);\r\n\r\n        setStatus();\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const toProfile = (id) => {\r\n    setModalShow(false);\r\n    router.push(`/profile/${id}`);\r\n  };\r\n\r\n  const setStatus = () => {\r\n    setLoading(false);\r\n    setModalShow(true);\r\n  };\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    accepts: \"image/*\",\r\n  });\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Header />\r\n      <Row className=\"edit-profile-container\">\r\n        <Col className=\"edit-profile-img-preview\">\r\n          <Row className=\"edit-profile-art-upload\">\r\n            {isLoading ? (\r\n              <div className=\"dropzone\">\r\n                <Spinner animation=\"border\" variant=\"info\" />\r\n              </div>\r\n            ) : (\r\n              <div\r\n                {...getRootProps()}\r\n                className={`dropzone ${isDragActive ? \"active\" : null}`}\r\n              >\r\n                <input {...getInputProps()} />\r\n                <p className=\"edit-best-upload\">\r\n                  <strong className=\"edit-blue-upload\">Upload</strong> Best Your\r\n                  Art\r\n                </p>\r\n              </div>\r\n            )}\r\n          </Row>\r\n          <Row className=\"edit-profile-art-preview\">\r\n            {isLoading ? (\r\n              <div className=\"edit-profile-preview-image\">\r\n                <Spinner animation=\"border\" variant=\"info\" />\r\n              </div>\r\n            ) : (\r\n              <div className=\"edit-profile-preview-image\">\r\n                {cloudFiles.map((file) => (\r\n                  <Image\r\n                    key={file.public_id}\r\n                    className=\"edit-profile-preview-image-bottom\"\r\n                    cloudName=\"satria-img\"\r\n                    publicId={file.public_id}\r\n                    width=\"150\"\r\n                    crop=\"scale\"\r\n                  />\r\n                ))}\r\n              </div>\r\n            )}\r\n          </Row>\r\n        </Col>\r\n        <Col className=\"edit-profile-form-container\">\r\n          <Row className=\"edit-profile-upload-container\">\r\n            <label for=\"profpic\" className=\"attach-profpic\">\r\n              {!previewProfpic ? (\r\n                <div className=\"circle\">\r\n                  <Camera className=\"camera\" />\r\n                </div>\r\n              ) : (\r\n                <img\r\n                  className=\"img-preview-profile\"\r\n                  src={previewProfpic}\r\n                  alt=\"image preview\"\r\n                />\r\n              )}\r\n            </label>\r\n          </Row>\r\n          <Row className=\"edit-profile-input-container\">\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={validationSchema}\r\n              onSubmit={(e) => handleSubmit(e)}\r\n            >\r\n              {(formik) => {\r\n                return (\r\n                  <Form>\r\n                    <Gap height={40} />\r\n                    <FormikControl\r\n                      className=\"form-input\"\r\n                      placeholder=\"Greeting\"\r\n                      control=\"input\"\r\n                      type=\"text\"\r\n                      name=\"greeting\"\r\n                    />\r\n                    <Gap height={20} />\r\n                    <FormikControl\r\n                      className=\"form-input\"\r\n                      placeholder=\"Full Name\"\r\n                      control=\"input\"\r\n                      type=\"text\"\r\n                      name=\"fullname\"\r\n                    />\r\n                    <Gap height={20} />\r\n                    <input\r\n                      id=\"profpic\"\r\n                      name=\"profpic\"\r\n                      accept=\"image/*\"\r\n                      type=\"file\"\r\n                      onChange={handleFileUploadProfpic}\r\n                      style={{ display: \"none\" }}\r\n                    />\r\n                    <Gap height={20} />\r\n                    <Button\r\n                      block\r\n                      variant=\"info\"\r\n                      className=\"btn-save\"\r\n                      type=\"submit\"\r\n                      disabled={isLoading || !formik.isValid}\r\n                      // onClick={!isLoading ? handleSubmit : null}\r\n                    >\r\n                      {isLoading ? (\r\n                        <Spinner\r\n                          as=\"span\"\r\n                          animation=\"border\"\r\n                          size=\"sm\"\r\n                          role=\"status\"\r\n                          aria-hidden=\"true\"\r\n                        />\r\n                      ) : (\r\n                        \"Save\"\r\n                      )}\r\n                    </Button>\r\n                  </Form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Modal\r\n        size=\"sm\"\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        centered\r\n        transparent={true}\r\n      >\r\n        <Modal.Body className=\"modal-bodys\">\r\n          <h2 className=\"modal-confirms\">Successfully Changed</h2>\r\n          <Button\r\n            variant=\"info\"\r\n            onClick={() => toProfile(user.id)}\r\n            className=\"btn-modal-ok\"\r\n          >\r\n            OK\r\n          </Button>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EditProfile;\r\n","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\Dropzone\\index.js",["147"],"import { useDropzone } from \"react-dropzone\";\r\n\r\nfunction Dropzone(props) {\r\n  const {\r\n    acceptedFiles,\r\n    fileRejections,\r\n    getRootProps,\r\n    getInputProps,\r\n  } = useDropzone({\r\n    accept: \"image/jpeg, image/png\",\r\n  });\r\n\r\n  const acceptedFileItems = acceptedFiles.map((file) => (\r\n    <li key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n    </li>\r\n  ));\r\n\r\n  //   const fileRejectionItems = fileRejections.map(({ file, errors }) => (\r\n  //     <li key={file.path}>\r\n  //       {file.path} - {file.size} bytes\r\n  //       <ul>\r\n  //         {errors.map((e) => (\r\n  //           <li key={e.code}>{e.message}</li>\r\n  //         ))}\r\n  //       </ul>\r\n  //     </li>\r\n  //   ));\r\n\r\n  return (\r\n    <section>\r\n      <div {...getRootProps({ className: \"dropzone\" })}>\r\n        <input {...getInputProps()} />\r\n        <p>Upload Best Your Art</p>\r\n        <em>(Only *.jpeg and *.png images will be accepted)</em>\r\n      </div>\r\n      <aside>\r\n        <h4>Accepted files</h4>\r\n        <ul>{acceptedFileItems}</ul>\r\n        {/* <h4>Rejected files</h4>\r\n        <ul>{fileRejectionItems}</ul> */}\r\n      </aside>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Dropzone;\r\n",["148","149"],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\config\\Context\\index.js",[],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\Loading\\index.js",[],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\Button\\index.js",[],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\molecules\\Content\\index.js",["150","151","152","153"],"import { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n//CSS\r\nimport \"./Content.scss\";\r\n\r\n//Config\r\nimport { API, setAuthToken } from \"../../../config/API\";\r\n\r\nconst Content = (props) => {\r\n  console.log(props.setFilter);\r\n  const router = useHistory();\r\n  //Get UserInfo\r\n  const userLogin = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  const token = localStorage.getItem(\"token\");\r\n  //State\r\n  const [posts, setPosts] = useState(undefined);\r\n  const [visible, setVisible] = useState(12);\r\n\r\n  const getPosts = async () => {\r\n    try {\r\n      setAuthToken(token);\r\n      const allPosts = await API.get(\"/posts\");\r\n      setPosts(allPosts.data.data.posts.sort((a, b) => a - b).reverse());\r\n      console.log(allPosts.data.data.posts.sort((a, b) => a - b).reverse());\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, []);\r\n\r\n  const toDetailPost = (id) => {\r\n    router.push(`/detail-post/${id}`);\r\n  };\r\n\r\n  const showMore = () => {\r\n    setVisible((prevValue) => prevValue + 12);\r\n  };\r\n\r\n  return posts == undefined ? (\r\n    <p>Loading...</p>\r\n  ) : (\r\n    <div>\r\n      {props.setFilter === \"today\" ? (\r\n        <div>\r\n          {posts\r\n            .filter((val) => {\r\n              if (props.search === \"\") {\r\n                return val;\r\n              } else if (\r\n                val.title.toLowerCase().includes(props.search.toLowerCase())\r\n              ) {\r\n                return val;\r\n              }\r\n            })\r\n            .slice(0, visible)\r\n            .map((post) => (\r\n              <img\r\n                className=\"img-post-content\"\r\n                onClick={() => toDetailPost(post.id)}\r\n                key={post.id}\r\n                src={post.photos.length > 0 && post.photos[0].photo}\r\n                alt=\"img-post\"\r\n              />\r\n            ))}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          {posts\r\n            .filter((val) => {\r\n              if (\r\n                val.User.following.length > 0 &&\r\n                val.User.following[0].follower === userLogin.id\r\n              ) {\r\n                return val;\r\n              }\r\n            })\r\n            .slice(0, visible)\r\n            .map((post) => (\r\n              <img\r\n                className=\"img-post-content\"\r\n                onClick={() => toDetailPost(post.id)}\r\n                key={post.id}\r\n                src={post.photos[0].photo}\r\n                alt=\"img-post\"\r\n              />\r\n            ))}\r\n        </div>\r\n      )}\r\n\r\n      {props.search === \"\" ? (\r\n        <div className=\"load-more-btn\">\r\n          <Button onClick={() => showMore()} variant=\"secondary\">\r\n            Load More\r\n          </Button>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\DetailPost\\index.js",["154","155","156","157","158","159","160"],"import { useEffect, useState } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\n//CSS\r\nimport \"./DetailPost.scss\";\r\n\r\n//Config\r\nimport { API, setAuthToken } from \"../../config/API\";\r\n\r\n//Components\r\nimport Header from \"../../components/molecules/Header\";\r\nimport HeaderDetail from \"../../components/molecules/HeaderDetail\";\r\nimport ContentDetail from \"../../components/molecules/ContentDetail\";\r\n\r\nconst DetailPost = (props) => {\r\n  //Get UserInfo\r\n  const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  //State\r\n  const [post, setPost] = useState(undefined);\r\n  const [avatar, setAvatar] = useState(\"\");\r\n\r\n  const getDetailPost = async () => {\r\n    const id = props.match.params.id;\r\n\r\n    try {\r\n      setAuthToken(token);\r\n      const detailPost = await API.get(`/post/${id}`);\r\n      setPost(detailPost.data.data.post);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDetailPost();\r\n  }, []);\r\n\r\n  return post == undefined ? (\r\n    <h1></h1>\r\n  ) : (\r\n    <Container fluid>\r\n      <Header />\r\n      <Row>\r\n        {post && (\r\n          <HeaderDetail\r\n            key={post.id}\r\n            id={post.id}\r\n            User={post.User}\r\n            title={post.title}\r\n          />\r\n        )}\r\n      </Row>\r\n      <Row>\r\n        {post && (\r\n          <ContentDetail\r\n            key={post.id}\r\n            id={post.id}\r\n            User={post.User}\r\n            title={post.title}\r\n            description={post.description}\r\n            photo={post.photos}\r\n          />\r\n        )}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DetailPost;\r\n","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\molecules\\HeaderDetail\\index.js",["161","162","163"],"import { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n//CSS\r\nimport \"./HeaderDetail.scss\";\r\n\r\n//Config\r\nimport { API, setAuthToken } from \"../../../config/API\";\r\n\r\n//Components\r\nimport Gap from \"../../atoms/Gap\";\r\n\r\nconst HeaderDetail = (props) => {\r\n  console.log(\"nilai props\", props);\r\n\r\n  const [userData, setUserData] = useState(undefined);\r\n\r\n  const router = useHistory();\r\n  const userLogin = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const toHiredPage = (userId) => {\r\n    router.push(`/hired/${userId}`);\r\n  };\r\n\r\n  const toProfile = (userId) => {\r\n    router.push(`/profile/${userId}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUser(props.User.id);\r\n  }, []);\r\n\r\n  const getUser = async (userId) => {\r\n    try {\r\n      setAuthToken(token);\r\n      const userInfo = await API.get(`/user-profile/${userId}`);\r\n      setUserData(userInfo.data.user);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleFollow = async () => {\r\n    try {\r\n      setAuthToken(token);\r\n      const body = { following: props.User.id, follower: userLogin.id };\r\n      const config = { headers: { \"Content-Type\": \"application/json\" } };\r\n      await API.post(\"/follow\", body, config);\r\n      getUser(props.User.id);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleUnFollow = async () => {\r\n    try {\r\n      const body = { following: userData.id, follower: userLogin.id };\r\n      const config = { headers: { \"Content-Type\": \"application/json\" } };\r\n      await API.delete(\"/delete-follow\", { data: body }, config);\r\n      getUser(props.User.id);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return userData == undefined ? (\r\n    <p></p>\r\n  ) : (\r\n    <Container fluid>\r\n      <Row className=\"header-detail-container\">\r\n        <Col sm={5} className=\"header-detail-left\">\r\n          <div className=\"header-detail-avatar-container\">\r\n            <img\r\n              onClick={() => toProfile(props.User.id)}\r\n              className=\"header-detail-avatar\"\r\n              src={props.User.profpic}\r\n              alt=\"avatar\"\r\n            />\r\n          </div>\r\n          <div className=\"header-detail-title\">\r\n            <p className=\"header-detail-top-title\">{props.title}</p>\r\n            <p\r\n              onClick={() => toProfile(props.User.id)}\r\n              className=\"header-detail-name\"\r\n            >\r\n              {props.User.fullname}\r\n            </p>\r\n          </div>\r\n        </Col>\r\n\r\n        {props.User.id != userLogin.id ? (\r\n          <Col sm={2} className=\"header-detail-right\">\r\n            {userData.following.find(\r\n              (follow) => follow.following === userData.id\r\n            ) ? (\r\n              <Button\r\n                onClick={() => handleUnFollow()}\r\n                className=\"btn-follow\"\r\n                variant=\"secondary\"\r\n              >\r\n                Unfollow\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                onClick={() => handleFollow()}\r\n                className=\"btn-follow\"\r\n                variant=\"secondary\"\r\n              >\r\n                Follow\r\n              </Button>\r\n            )}\r\n            <Gap width={24} />\r\n            <Button\r\n              onClick={() => toHiredPage(props.User.id)}\r\n              className=\"btn-hire\"\r\n              variant=\"info\"\r\n            >\r\n              Hire\r\n            </Button>\r\n          </Col>\r\n        ) : null}\r\n      </Row>\r\n      <Gap height={24} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default HeaderDetail;\r\n","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\molecules\\ContentDetail\\index.js",["164","165","166","167"],"import { useEffect, useState } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\n//CSS\r\nimport \"./ContentDetail.scss\";\r\n\r\n//Components\r\nimport Gap from \"../../atoms/Gap\";\r\n\r\nconst ContentDetail = (props) => {\r\n  const [listPhotos, setListPhotos] = useState([]);\r\n  const [selectedImg, setSelectedImg] = useState(props.photo[0].photo);\r\n\r\n  const getListPhotos = () => {\r\n    const get = props.photo.map((photo) =>\r\n      setListPhotos((old) => [...old, photo.photo])\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    getListPhotos();\r\n  }, []);\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row className=\"content-detail-top-container\">\r\n        <div className=\"img-big-container\">\r\n          <img\r\n            className=\"content-detail-img-selected\"\r\n            src={selectedImg}\r\n            alt=\"selected-picture\"\r\n          />\r\n        </div>\r\n      </Row>\r\n      <Row className=\"content-detail-list-container\">\r\n        {listPhotos.map((photo, index) => (\r\n          <div key={index} className=\"content-detail-list-img\">\r\n            <img\r\n              onClick={() => setSelectedImg(photo)}\r\n              className=\"content-detail-img\"\r\n              src={photo}\r\n              alt=\"img-post\"\r\n              style={{\r\n                border: selectedImg === photo ? \"3px solid #15a3b9\" : \"\",\r\n              }}\r\n            />\r\n          </div>\r\n        ))}\r\n      </Row>\r\n      <Gap height={28} />\r\n      <Row className=\"content-detail-title-container\">\r\n        Say Hello &nbsp; <span className=\"email-blue\">{props.User.email}</span>\r\n      </Row>\r\n      <Gap height={18} />\r\n      <Row className=\"content-detail-desc-container\">{props.description}</Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ContentDetail;\r\n","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\components\\atoms\\DatePicker\\index.js",["168"],"import { useState } from \"react\";\r\nimport DateView from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport TextError from \"../TextError\";\r\n\r\nconst DatePicker = (props) => {\r\n  const { label, name, ...rest } = props;\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  return (\r\n    <div>\r\n      <label htmlFor={name}>{label}</label>\r\n      <Field name={name}>\r\n        {({ form, field }) => {\r\n          const { setFieldValue } = form;\r\n          const { value } = field;\r\n          return (\r\n            <DateView\r\n              id={name}\r\n              {...field}\r\n              {...rest}\r\n              selected={value != null ? value : startDate}\r\n              onChange={(val) => setFieldValue(name, val)}\r\n            />\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\Profile\\index.js",["169","170","171","172","173","174","175","176"],"import { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\n\r\n//CSS\r\nimport \"./Profile.scss\";\r\n\r\n//Config\r\nimport { API, setAuthToken } from \"../../config/API\";\r\n\r\n//Components\r\nimport Header from \"../../components/molecules/Header\";\r\nimport Jumbotron from \"../../assets/images/jumbotron.png\";\r\nimport Gap from \"../../components/atoms/Gap\";\r\nimport { ReactComponent as VectorRightProfile } from \"../../assets/images/vector-right-profile.svg\";\r\n\r\nconst Profile = (props) => {\r\n  const router = useHistory();\r\n  //Get UserInfo\r\n  const [userData, setUserData] = useState(undefined);\r\n  const [length, setLength] = useState(0);\r\n\r\n  const userLogin = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const getUser = async (userId) => {\r\n    try {\r\n      setAuthToken(token);\r\n      const userInfo = await API.get(`/user-profile/${userId}`);\r\n      setLength(userInfo.data.user.post.length - 1);\r\n      setUserData(userInfo.data.user);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUser(props.match.params.id);\r\n  }, []);\r\n\r\n  const handleFollow = async () => {\r\n    try {\r\n      const body = { following: userData.id, follower: userLogin.id };\r\n      const config = { headers: { \"Content-Type\": \"application/json\" } };\r\n      await API.post(\"/follow\", body, config);\r\n      getUser(props.match.params.id);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleUnFollow = async () => {\r\n    try {\r\n      const body = { following: userData.id, follower: userLogin.id };\r\n      const config = { headers: { \"Content-Type\": \"application/json\" } };\r\n      await API.delete(\"/delete-follow\", { data: body }, config);\r\n      getUser(props.match.params.id);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const toEditProfile = () => {\r\n    router.push(\"/edit-profile\");\r\n  };\r\n\r\n  const toPost = (postId) => {\r\n    router.push(`/detail-post/${postId}`);\r\n  };\r\n\r\n  const toHire = (userId) => {\r\n    router.push(`/hired/${userId}`);\r\n  };\r\n\r\n  return userData == undefined ? (\r\n    <p></p>\r\n  ) : (\r\n    <Container fluid>\r\n      <Header />\r\n      <Row className=\"profile-container\">\r\n        <Col className=\"profile-left-container\">\r\n          <img src={userData.profpic} className=\"profile-img-left\" />\r\n          <Gap height={23} />\r\n          <p className=\"profile-name-left\">{userData.fullname}</p>\r\n          {userData.greeting == null ? (\r\n            <p className=\"no-greeting-yet\">This user not set greeting yet</p>\r\n          ) : (\r\n            <p className=\"profile-greeting-left\">{userData.greeting}</p>\r\n          )}\r\n\r\n          {userData.id == userLogin.id ? (\r\n            <Button\r\n              variant=\"info\"\r\n              onClick={toEditProfile}\r\n              title=\"Edit Profile\"\r\n              className=\"btn-profile-left\"\r\n            >\r\n              Edit Profile\r\n            </Button>\r\n          ) : (\r\n            <div>\r\n              {userData.following.find(\r\n                (follow) => follow.following === userData.id\r\n              ) ? (\r\n                <Button\r\n                  onClick={() => handleUnFollow()}\r\n                  variant=\"secondary\"\r\n                  className=\"btn-profile-left\"\r\n                >\r\n                  Unfollow\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  onClick={() => handleFollow()}\r\n                  variant=\"secondary\"\r\n                  className=\"btn-profile-left\"\r\n                >\r\n                  Follow\r\n                </Button>\r\n              )}\r\n\r\n              <Button\r\n                onClick={() => toHire(userData.id)}\r\n                variant=\"info\"\r\n                className=\"btn-profile-left\"\r\n              >\r\n                Hire\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </Col>\r\n        <Col className=\"profile-right-container\">\r\n          <VectorRightProfile className=\"vector-right-profile\" />\r\n          {userData.post.length == 0 ? (\r\n            <p className=\"latest-post-container\">No Post Yet</p>\r\n          ) : (\r\n            <img\r\n              className=\"latest-post-container\"\r\n              onClick={() => toPost(userData.post[length].id)}\r\n              src={userData.post[length].photos[0].photo}\r\n              alt=\"jumbotron\"\r\n            />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"profile-mywork-head\">My Work</Row>\r\n      <Row className=\"profile-mywork-container\">\r\n        {userData.arts.length == 0 ? (\r\n          <p className=\"no-greeting-yet\">This user has no art uploaded yet</p>\r\n        ) : (\r\n          userData.arts.map((art) => (\r\n            <img\r\n              key={art.id}\r\n              src={art.photo}\r\n              alt=\"my-work\"\r\n              className=\"img-mywork\"\r\n            />\r\n          ))\r\n        )}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\Landing\\index.js",["177","178"],"import { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport ModalBody from \"react-bootstrap/ModalBody\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n//CSS\r\nimport \"./Landing.scss\";\r\n\r\n//Components\r\nimport Gap from \"../../components/atoms/Gap\";\r\nimport LandingBg from \"../../assets/images/home.png\";\r\nimport LandingLogo from \"../../assets/images/landing-logo.png\";\r\nimport { ReactComponent as VectorLeftTop } from \"../../assets/images/vector-left-top.svg\";\r\nimport { ReactComponent as VectorLeftBot } from \"../../assets/images/vector-left-bot.svg\";\r\nimport { ReactComponent as VectorRightBot } from \"../../assets/images/vector-right-bot.svg\";\r\n\r\n//Config\r\nimport FormikControl from \"../../config/FormikControl\";\r\nimport { API, setAuthToken } from \"../../config/API\";\r\n\r\nconst Landing = (props) => {\r\n  const router = useHistory();\r\n  //Modal\r\n  const [registerModal, setRegisterModal] = useState(false);\r\n  const [loginModal, setLoginModal] = useState(false);\r\n\r\n  //Alert\r\n  const [alertRegister, setAlertRegister] = useState(false);\r\n  const [alertLogin, setAlertLogin] = useState(false);\r\n  const [successShow, setSuccessShow] = useState(false);\r\n\r\n  //Initial State Register Formik\r\n  const initialValuesRegister = {\r\n    email: \"\",\r\n    password: \"\",\r\n    fullname: \"\",\r\n  };\r\n\r\n  //Initial State Login Formik\r\n  const initialValuesLogin = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  //Schema validation form for register\r\n  const validationSchemaRegister = Yup.object({\r\n    email: Yup.string().email(\"Invalid email format\").required(\"required\"),\r\n    password: Yup.string()\r\n      .min(8, \"Minimum password is 8 characters\")\r\n      .required(\"required\"),\r\n    fullname: Yup.string()\r\n      .min(3, \"Minimum fullname is 3 characters\")\r\n      .required(\"required\"),\r\n  });\r\n\r\n  //Schema validation form for login\r\n  const validationSchemaLogin = Yup.object({\r\n    email: Yup.string().email(\"Invalid email format\").required(\"required\"),\r\n    password: Yup.string().required(\"required\"),\r\n  });\r\n\r\n  const handleSubmitRegister = async (values) => {\r\n    try {\r\n      const data = JSON.stringify({\r\n        email: values.email,\r\n        password: values.password,\r\n        fullname: values.fullname,\r\n        profpic:\r\n          \"https://res.cloudinary.com/satria-img/image/upload/v1606645803/satriayud/no-person-profile-pic_k3ijd5.png\",\r\n      });\r\n      const config = { headers: { \"Content-Type\": \"application/json\" } };\r\n      const response = await API.post(\"/register\", data, config);\r\n      if (response.status === 200) {\r\n        setAlertRegister(false);\r\n        setSuccessShow(true);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error Result :\", error);\r\n      setAlertRegister(true);\r\n    }\r\n  };\r\n\r\n  const handleSubmitLogin = async (values) => {\r\n    try {\r\n      const data = JSON.stringify({\r\n        email: values.email,\r\n        password: values.password,\r\n      });\r\n      const config = { headers: { \"Content-Type\": \"application/json\" } };\r\n      const response = await API.post(\"/login\", data, config);\r\n\r\n      if (response.status == 200) {\r\n        setAlertLogin(false);\r\n        localStorage.setItem(\"token\", response.data.data.token);\r\n        localStorage.setItem(\"userInfo\", JSON.stringify(response.data.data));\r\n        console.log(\"login success\");\r\n        setAuthToken(response.data.data.token);\r\n        router.push(\"/home\");\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error Result :\", error);\r\n      setAlertLogin(true);\r\n    }\r\n  };\r\n\r\n  const toLoginShow = () => {\r\n    setRegisterModal(false);\r\n    setLoginModal(true);\r\n    setAlertRegister(false);\r\n    setSuccessShow(false);\r\n  };\r\n\r\n  const toRegisterShow = () => {\r\n    setLoginModal(false);\r\n    setRegisterModal(true);\r\n    setAlertRegister(false);\r\n    setSuccessShow(false);\r\n  };\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row className=\"btn-landing-container\">\r\n        <VectorLeftTop className=\"vector-left-top\" />\r\n        <VectorLeftBot className=\"vector-left-bot\" />\r\n        <VectorRightBot className=\"vector-right-bot\" />\r\n        <Col className=\"landing-left-container\">\r\n          <Row className=\"logo-left-landing\">\r\n            <img\r\n              className=\"logo-left-landing-img\"\r\n              src={LandingLogo}\r\n              alt=\"landing-logo\"\r\n            />\r\n          </Row>\r\n          <Row className=\"title-left-landing\">\r\n            show your work to inspire everyone\r\n          </Row>\r\n          <Row className=\"subtitle-left-landing\">\r\n            Ways Exhibition is a website design creators gather to share their\r\n            work with other creators\r\n          </Row>\r\n          <Row className=\"btn-left-landing\">\r\n            <Button\r\n              className=\"btn-reg-landing\"\r\n              variant=\"info\"\r\n              onClick={() => setRegisterModal(true)}\r\n            >\r\n              Join Now\r\n            </Button>\r\n            <Gap width={20} />\r\n\r\n            <Button\r\n              className=\"btn-log-landing\"\r\n              variant=\"light\"\r\n              onClick={() => setLoginModal(true)}\r\n              title=\"Login\"\r\n            >\r\n              Login\r\n            </Button>\r\n          </Row>\r\n        </Col>\r\n        <Col className=\"landing-right-container\">\r\n          <img className=\"landing-right-img\" src={LandingBg} alt=\"bg\" />\r\n        </Col>\r\n      </Row>\r\n      <Modal\r\n        size=\"lg\"\r\n        show={loginModal}\r\n        onHide={() => setLoginModal(false)}\r\n        centered\r\n        dialogClassName=\"modal-login\"\r\n      >\r\n        <Modal.Body className=\"modal-container\">\r\n          <div className=\"login-wrapper\">\r\n            <Formik\r\n              initialValues={initialValuesLogin}\r\n              validationSchema={validationSchemaLogin}\r\n              onSubmit={(e) => handleSubmitLogin(e)}\r\n            >\r\n              {(formik) => {\r\n                return (\r\n                  <Form>\r\n                    <p className=\"title-login\">Login</p>\r\n                    <FormikControl\r\n                      className=\"form-input\"\r\n                      placeholder=\"Email\"\r\n                      control=\"input\"\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                    />\r\n                    <Gap height={20} />\r\n                    <FormikControl\r\n                      className=\"form-input\"\r\n                      placeholder=\"Password\"\r\n                      control=\"input\"\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                    />\r\n                    <Gap height={20} />\r\n                    {alertLogin && (\r\n                      <Alert\r\n                        className=\"alert-log\"\r\n                        variant=\"danger\"\r\n                        onClose={() => setAlertLogin(false)}\r\n                      >\r\n                        Your email or password is incorrect !\r\n                      </Alert>\r\n                    )}\r\n\r\n                    <Button\r\n                      block\r\n                      className=\"btn-login\"\r\n                      type=\"submit\"\r\n                      variant=\"info\"\r\n                      disabled={!formik.isValid}\r\n                    >\r\n                      Login\r\n                    </Button>\r\n                    <Gap height={29} />\r\n                    <p className=\"to-register\">\r\n                      Don't have an account ? Click{\" \"}\r\n                      <strong\r\n                        onClick={toRegisterShow}\r\n                        className=\"cursor-pointer\"\r\n                      >\r\n                        Here\r\n                      </strong>\r\n                    </p>\r\n                  </Form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n      <Modal\r\n        size=\"lg\"\r\n        show={registerModal}\r\n        onHide={() => setRegisterModal(false)}\r\n        centered\r\n        dialogClassName=\"modal-register\"\r\n      >\r\n        <Modal.Body className=\"modal-container\">\r\n          <div className=\"register-wrapper\">\r\n            <Formik\r\n              initialValues={initialValuesRegister}\r\n              validationSchema={validationSchemaRegister}\r\n              onSubmit={(e) => handleSubmitRegister(e)}\r\n            >\r\n              {(formik) => {\r\n                return (\r\n                  <Form>\r\n                    <p className=\"title-register\">Register</p>\r\n                    <FormikControl\r\n                      className=\"form-input\"\r\n                      placeholder=\"Email\"\r\n                      control=\"input\"\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                    />\r\n                    <Gap height={20} />\r\n                    <FormikControl\r\n                      className=\"form-input\"\r\n                      placeholder=\"Password\"\r\n                      control=\"input\"\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                    />\r\n                    <Gap height={20} />\r\n                    <FormikControl\r\n                      className=\"form-input\"\r\n                      placeholder=\"Fullname\"\r\n                      control=\"input\"\r\n                      type=\"text\"\r\n                      name=\"fullname\"\r\n                    />\r\n                    {alertRegister && (\r\n                      <Alert\r\n                        className=\"alert-log\"\r\n                        variant=\"danger\"\r\n                        onClose={() => setAlertRegister(false)}\r\n                      >\r\n                        Your email already registered\r\n                      </Alert>\r\n                    )}\r\n                    {successShow && (\r\n                      <Alert\r\n                        className=\"alert-log\"\r\n                        variant=\"success\"\r\n                        onClose={() => setSuccessShow(false)}\r\n                      >\r\n                        Your account successfully registered, Please{\" \"}\r\n                        <strong\r\n                          className=\"cursor-pointer\"\r\n                          onClick={toLoginShow}\r\n                        >\r\n                          login\r\n                        </strong>{\" \"}\r\n                        to continue\r\n                      </Alert>\r\n                    )}\r\n                    <Gap height={29} />\r\n                    <Button\r\n                      block\r\n                      className=\"btn-register\"\r\n                      type=\"submit\"\r\n                      variant=\"info\"\r\n                      disabled={!formik.isValid}\r\n                    >\r\n                      Register\r\n                    </Button>\r\n                    <Gap height={29} />\r\n                    <p className=\"to-login\">\r\n                      Already have an account ? Click{\" \"}\r\n                      <strong onClick={toLoginShow} className=\"cursor-pointer\">\r\n                        Here\r\n                      </strong>\r\n                    </p>\r\n                  </Form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\Home\\index.js",["179","180","181","182","183","184"],"import { useEffect, useState, useContext } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport { Formik, Form } from \"formik\";\r\n\r\n//CSS\r\nimport \"./Home.scss\";\r\n\r\n//Config\r\nimport { API, setAuthToken } from \"../../config/API\";\r\nimport { AppContext } from \"../../config/Context\";\r\nimport FormikControl from \"../../config/FormikControl\";\r\n\r\n//Component\r\nimport Header from \"../../components/molecules/Header\";\r\nimport { ReactComponent as ComboBox } from \"../../assets/logos/combo-box.svg\";\r\nimport { ReactComponent as Search } from \"../../assets/logos/search.svg\";\r\nimport Content from \"../../components/molecules/Content\";\r\nimport Gap from \"../../components/atoms/Gap\";\r\n\r\nconst Home = () => {\r\n  //Global State\r\n  const [state, dispatch] = useContext(AppContext);\r\n  //Get UserInfo\r\n  const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  //State\r\n  const [posts, setPosts] = useState([{}]);\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [dropdown, setDropDown] = useState(\"today\");\r\n\r\n  //Initial State Formik\r\n  const initialValues = {\r\n    Search: \"\",\r\n  };\r\n\r\n  const getPosts = async () => {\r\n    try {\r\n      setAuthToken(token);\r\n      const allPosts = await API.get(\"/posts\");\r\n      setPosts(allPosts.data.data.posts);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, []);\r\n\r\n  const handleSearch = (e) => {\r\n    setSearchValue(e.search);\r\n  };\r\n\r\n  return !posts ? (\r\n    <h1>Loading...</h1>\r\n  ) : (\r\n    <Container fluid>\r\n      <Header />\r\n      <Row className=\"homepage-top-wrapper\">\r\n        <Col className=\"homepage-left\">\r\n          <Dropdown variant=\"secondary\">\r\n            <Dropdown.Toggle className=\"homepage-dropdown-container\">\r\n              {dropdown}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu className=\"homepage-dropdown-menu\">\r\n              {dropdown === \"today\" ? (\r\n                <Dropdown.Item\r\n                  eventKey=\"following\"\r\n                  onSelect={() => setDropDown(\"following\")}\r\n                >\r\n                  following\r\n                </Dropdown.Item>\r\n              ) : (\r\n                <Dropdown.Item\r\n                  eventKey=\"today\"\r\n                  onSelect={() => setDropDown(\"today\")}\r\n                >\r\n                  today\r\n                </Dropdown.Item>\r\n              )}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col>\r\n        <Col className=\"homepage-right\">\r\n          <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={(e) => handleSearch(e)}\r\n          >\r\n            {(formik) => {\r\n              return (\r\n                <Form>\r\n                  <div className=\"homepage-search-container\">\r\n                    <FormikControl\r\n                      className=\"search-input\"\r\n                      placeholder=\"Search\"\r\n                      control=\"input\"\r\n                      type=\"text\"\r\n                      name=\"search\"\r\n                    />\r\n                    <Search className=\"search-logo\" />\r\n                  </div>\r\n                </Form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"homepage-title\">\r\n        {searchValue === \"\" ? (\r\n          <div>\r\n            {dropdown === \"today\"\r\n              ? \"Today's Post\"\r\n              : dropdown === \"following\"\r\n              ? \"Based On Your Following\"\r\n              : null}\r\n          </div>\r\n        ) : (\r\n          <div>Search's Result</div>\r\n        )}\r\n      </Row>\r\n      <Row className=\"homepage-content-wrapper\">\r\n        <Content search={searchValue} setFilter={dropdown} />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\AddPost\\index.js",["185"],"import { useState, useCallback } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Image } from \"cloudinary-react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\n//Config\r\nimport FormikControl from \"../../config/FormikControl\";\r\nimport { API, setAuthToken } from \"../../config/API\";\r\n\r\n//CSS\r\nimport \"./AddPost.scss\";\r\n\r\n//Components\r\nimport Header from \"../../components/molecules/Header\";\r\nimport Gap from \"../../components/atoms/Gap\";\r\nimport { ReactComponent as Cloud } from \"../../assets/logos/cloud.svg\";\r\n\r\nconst AddPost = () => {\r\n  const router = useHistory();\r\n  //Get UserInfo\r\n  const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  const token = localStorage.getItem(\"token\");\r\n  //State\r\n  const [cloudFiles, setCloudFiles] = useState([]);\r\n  //Modal\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [isLoading, setLoading] = useState(false);\r\n  //Alert\r\n  const [alertShow, setAlertShow] = useState(false);\r\n  //Initial State Formik\r\n  const initialValues = {\r\n    title: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  //Schema validation form\r\n  const validationSchema = Yup.object({\r\n    title: Yup.string().min(3),\r\n    description: Yup.string().min(5),\r\n  });\r\n\r\n  const handleSubmit = async (e) => {\r\n    const body = { title: e.title, description: e.description };\r\n    try {\r\n      if (cloudFiles.length == 0) {\r\n        setAlertShow(true);\r\n      } else {\r\n        setAuthToken(token);\r\n        setAlertShow(false);\r\n        setLoading(true);\r\n        const resultPost = await API.post(`/add-post/${user.id}`, body);\r\n        const postId = resultPost.data.data.post.id;\r\n\r\n        cloudFiles.forEach(async (cloudFile) => {\r\n          const url = await cloudFile.secure_url;\r\n\r\n          const photos = { photo: url };\r\n          const saveToDb = await API.post(`/photo/${postId}`, photos);\r\n\r\n          console.log(\"saveToDb\", saveToDb);\r\n        });\r\n        setLoading(false);\r\n        setModalShow(true);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const onDrop = useCallback(async (acceptedFiles) => {\r\n    acceptedFiles.forEach(async (acceptedFile) => {\r\n      setLoading(true);\r\n      const body = new FormData();\r\n      body.append(\"file\", acceptedFile);\r\n      body.append(\"upload_preset\", \"satriayud\");\r\n      const response = await fetch(\r\n        \"https://api.cloudinary.com/v1_1/satria-img/image/upload\",\r\n        {\r\n          method: \"post\",\r\n          body,\r\n        }\r\n      );\r\n      const data = await response.json();\r\n\r\n      setCloudFiles((old) => [...old, data]);\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    accepts: \"image/*\",\r\n    maxFiles: 5,\r\n  });\r\n\r\n  const setRefresh = () => {\r\n    setModalShow(false);\r\n    window.location.reload();\r\n  };\r\n\r\n  const toHomePage = () => {\r\n    setModalShow(false);\r\n    router.push(\"/home\");\r\n  };\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Header />\r\n      <Row className=\"addpost-container\">\r\n        <Col className=\"addpost-left-container\">\r\n          <Row className=\"addpost-image-upload\">\r\n            {isLoading ? (\r\n              <div className=\"dropzone\">\r\n                <Spinner animation=\"border\" variant=\"info\" />\r\n              </div>\r\n            ) : (\r\n              <div\r\n                {...getRootProps()}\r\n                className={`dropzone ${isDragActive ? \"active\" : null}`}\r\n              >\r\n                <input {...getInputProps()} />\r\n                <div className=\"add-post-upload\">\r\n                  <Cloud />\r\n                  <p className=\"add-post-browse\">\r\n                    <strong className=\"browse\">Browse</strong>&nbsp; to choose\r\n                    file\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Row>\r\n          <Gap height={20} />\r\n          <Row className=\"add-post-bottom-container\">\r\n            {isLoading ? (\r\n              <div className=\"add-post-preview-image\">\r\n                <Spinner animation=\"border\" variant=\"info\" />\r\n              </div>\r\n            ) : (\r\n              <div className=\"add-post-preview-image\">\r\n                {cloudFiles.map((file) => (\r\n                  <Image\r\n                    key={file.public_id}\r\n                    className=\"add-post-img\"\r\n                    cloudName=\"satria-img\"\r\n                    publicId={file.public_id}\r\n                    width=\"150\"\r\n                    crop=\"scale\"\r\n                  />\r\n                ))}\r\n              </div>\r\n            )}\r\n          </Row>\r\n        </Col>\r\n        <Col className=\"addpost-right-container\">\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(e) => handleSubmit(e)}\r\n          >\r\n            {(formik) => {\r\n              return (\r\n                <Form>\r\n                  <Gap height={30} />\r\n                  <FormikControl\r\n                    className=\"form-input\"\r\n                    placeholder=\"Title\"\r\n                    control=\"input\"\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                  />\r\n                  <Gap height={20} />\r\n                  <FormikControl\r\n                    className=\"form-textarea\"\r\n                    placeholder=\"Description\"\r\n                    control=\"textarea\"\r\n                    type=\"text\"\r\n                    name=\"description\"\r\n                  />\r\n                  <Gap height={20} />\r\n                  {alertShow && (\r\n                    <Alert\r\n                      className=\"alert-add-post\"\r\n                      variant=\"warning\"\r\n                      onClose={() => setAlertShow(false)}\r\n                    >\r\n                      Please upload your post's photo\r\n                    </Alert>\r\n                  )}\r\n                  <div className=\"button-addpost-container\">\r\n                    <Button block variant=\"secondary\" disabled={isLoading}>\r\n                      Cancel\r\n                    </Button>\r\n                    <Gap width={20} />\r\n                    <Button\r\n                      block\r\n                      variant=\"info\"\r\n                      type=\"submit\"\r\n                      disabled={!formik.isValid || isLoading}\r\n                    >\r\n                      {isLoading ? \"Loading…\" : \"Post\"}\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Modal\r\n        show={modalShow}\r\n        onHide={() => setRefresh()}\r\n        centered\r\n        transparent={true}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title className=\"title-dialog\">\r\n            Post Successfully Added\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p className=\"confirms\">Go to Home Page ?</p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => setRefresh()}\r\n            className=\"btn-modal-ok-tohomepage\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            variant=\"info\"\r\n            onClick={() => toHomePage()}\r\n            className=\"btn-modal-ok-tohomepage\"\r\n          >\r\n            Ok\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddPost;\r\n","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\Transaction\\index.js",["186","187","188","189","190","191","192","193","194","195"],"import { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Tabs from \"react-bootstrap/Tabs\";\r\nimport Tab from \"react-bootstrap/Tab\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\n//CSS\r\nimport \"./Transaction.scss\";\r\n\r\n//Config\r\nimport { API, setAuthToken } from \"../../config/API\";\r\n\r\n//Components\r\nimport Header from \"../../components/molecules/Header\";\r\nimport Gap from \"../../components/atoms/Gap\";\r\nimport { ReactComponent as CompletedIcon } from \"../../assets/logos/completeIcon.svg\";\r\nimport { ReactComponent as CancelIcon } from \"../../assets/logos/cancelIcon.svg\";\r\nimport { ReactComponent as WaitingIcon } from \"../../assets/logos/waitingLogo.svg\";\r\n\r\nconst Transaction = () => {\r\n  const router = useHistory();\r\n\r\n  //Get UserInfo\r\n  const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  //Modal\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [description, setDescription] = useState(undefined);\r\n\r\n  //State\r\n  const [dataOffers, setDataOffers] = useState(undefined);\r\n  const [dataOrders, setDataOrders] = useState(undefined);\r\n  const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n  const [key, setKey] = useState(\"order\");\r\n\r\n  const getTransactions = async () => {\r\n    try {\r\n      setAuthToken(token);\r\n      const transactionOffer = await API.get(`/transactions-offer/${user.id}`);\r\n      setDataOffers(\r\n        transactionOffer.data.data.transactions.sort((a, b) => a - b).reverse()\r\n      );\r\n      const transactionOrder = await API.get(`/transactions-order/${user.id}`);\r\n      setDataOrders(\r\n        transactionOrder.data.data.transactions.sort((a, b) => a - b).reverse()\r\n      );\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTransactions();\r\n  }, []);\r\n\r\n  const setModalData = (data) => {\r\n    setDescription(data);\r\n    setModalShow(true);\r\n  };\r\n\r\n  const handleApprove = async (id) => {\r\n    try {\r\n      const body = { status: \"on going progress\" };\r\n      await API.patch(`/transaction/${id}`, body);\r\n      setModalShow(false);\r\n      getTransactions();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleCancel = async (id) => {\r\n    try {\r\n      const body = { status: \"canceled\" };\r\n      await API.patch(`/transaction/${id}`, body);\r\n      setModalShow(false);\r\n      getTransactions();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const toAddProject = (id) => {\r\n    router.push(`/add-project/${id}`);\r\n  };\r\n\r\n  const toViewProject = (id) => {\r\n    router.push(`/view-project/${id}`);\r\n  };\r\n\r\n  return dataOffers == undefined || dataOrders == undefined ? (\r\n    <h1>Loading...</h1>\r\n  ) : (\r\n    <Container fluid>\r\n      <Header />\r\n      <Tabs\r\n        className=\"transaction-tab-container\"\r\n        id=\"controlled-tab-example\"\r\n        onSelect={(k) => setKey(k)}\r\n      >\r\n        <Tab className=\"text-table-all\" eventKey=\"order\" title=\"My Order\">\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"align-text\">No</th>\r\n                <th>Vendor</th>\r\n                <th>Order</th>\r\n                <th>Start Project</th>\r\n                <th>End Project</th>\r\n                <th>Status</th>\r\n                <th className=\"align-text\">Action</th>\r\n              </tr>\r\n            </thead>\r\n            {dataOrders.length == 0 ? (\r\n              <div>No Orders Yet</div>\r\n            ) : (\r\n              <tbody>\r\n                {dataOrders.map((order, index) => (\r\n                  <tr key={index}>\r\n                    <td className=\"align-text\">{index + 1}</td>\r\n                    <td>{order.orderedTo.fullname}</td>\r\n                    <td>\r\n                      <span\r\n                        className=\"transaction-title-link\"\r\n                        onClick={() => setModalData(order)}\r\n                      >\r\n                        {order.title}\r\n                      </span>\r\n                    </td>\r\n                    <td>\r\n                      {new Date(order.startDate).toLocaleDateString(\r\n                        [],\r\n                        options\r\n                      )}\r\n                    </td>\r\n                    <td>\r\n                      {new Date(order.endDate).toLocaleDateString([], options)}\r\n                    </td>\r\n                    <td>\r\n                      <span\r\n                        style={{\r\n                          color:\r\n                            order.status === \"waiting approval\" ||\r\n                            order.status === \"on going progress\"\r\n                              ? \"#FF9900\"\r\n                              : order.status === \"completed\"\r\n                              ? \"#28a646\"\r\n                              : order.status === \"canceled\"\r\n                              ? \"#E83939\"\r\n                              : \"#00D1FF\",\r\n                        }}\r\n                      >\r\n                        {order.status}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"align-text\">\r\n                      {order.status === \"waiting approval\" ||\r\n                      order.status === \"on going progress\" ? (\r\n                        <WaitingIcon />\r\n                      ) : order.status === \"success\" ? (\r\n                        <CompletedIcon />\r\n                      ) : order.status === \"canceled\" ? (\r\n                        <CancelIcon />\r\n                      ) : (\r\n                        <div className=\"transaction-btn-send-container\">\r\n                          <Button\r\n                            className=\"btn-transaction-send-project\"\r\n                            variant=\"success\"\r\n                            onClick={() => toViewProject(order.id)}\r\n                          >\r\n                            View Project\r\n                          </Button>\r\n                        </div>\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            )}\r\n          </Table>\r\n        </Tab>\r\n        <Tab className=\"text-table-all\" eventKey=\"offer\" title=\"My Offer\">\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"align-text\">No</th>\r\n                <th>Client</th>\r\n                <th>Order</th>\r\n                <th>Start Project</th>\r\n                <th>End Project</th>\r\n                <th>Status</th>\r\n                <th className=\"align-text\">Action</th>\r\n              </tr>\r\n            </thead>\r\n            {dataOffers.length == 0 ? (\r\n              <div>No Offers Yet</div>\r\n            ) : (\r\n              <tbody>\r\n                {dataOffers.map((offer, index) => (\r\n                  <tr key={index}>\r\n                    <td className=\"align-text\">{index + 1}</td>\r\n                    <td>{offer.orderedBy.fullname}</td>\r\n                    <td>\r\n                      <span\r\n                        className=\"transaction-title-link\"\r\n                        onClick={() => setModalData(offer)}\r\n                      >\r\n                        {offer.title}\r\n                      </span>\r\n                    </td>\r\n                    <td>\r\n                      {new Date(offer.startDate).toLocaleDateString(\r\n                        [],\r\n                        options\r\n                      )}\r\n                    </td>\r\n                    <td>\r\n                      {new Date(offer.endDate).toLocaleDateString([], options)}\r\n                    </td>\r\n                    <td>\r\n                      <span\r\n                        style={{\r\n                          color:\r\n                            offer.status === \"waiting approval\" ||\r\n                            offer.status === \"on going progress\"\r\n                              ? \"#FF9900\"\r\n                              : offer.status === \"success\"\r\n                              ? \"#28a646\"\r\n                              : offer.status === \"canceled\"\r\n                              ? \"#E83939\"\r\n                              : \"#00D1FF\",\r\n                        }}\r\n                      >\r\n                        {offer.status}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"align-text\">\r\n                      {offer.status === \"waiting approval\" ? (\r\n                        <div className=\"transaction-btn-confirms-container\">\r\n                          <Button\r\n                            className=\"btn-transaction-cancel\"\r\n                            variant=\"danger\"\r\n                            onClick={() => handleCancel(offer.id)}\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                          <Gap width={10} />\r\n                          <Button\r\n                            className=\"btn-transaction-approve\"\r\n                            variant=\"success\"\r\n                            onClick={() => handleApprove(offer.id)}\r\n                          >\r\n                            Approve\r\n                          </Button>\r\n                        </div>\r\n                      ) : offer.status === \"success\" ? (\r\n                        <CompletedIcon />\r\n                      ) : offer.status === \"canceled\" ? (\r\n                        <CancelIcon />\r\n                      ) : offer.status === \"waiting approved project\" ? (\r\n                        <div className=\"transaction-btn-confirms-container\">\r\n                          <Button\r\n                            className=\"btn-transaction-view-project\"\r\n                            variant=\"success\"\r\n                            onClick={() => toViewProject(offer.id)}\r\n                          >\r\n                            View Project\r\n                          </Button>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"transaction-btn-send-container\">\r\n                          <Button\r\n                            className=\"btn-transaction-send-project\"\r\n                            variant=\"info\"\r\n                            onClick={() => toAddProject(offer.id)}\r\n                          >\r\n                            Send Project\r\n                          </Button>\r\n                        </div>\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            )}\r\n          </Table>\r\n        </Tab>\r\n      </Tabs>\r\n      {description != undefined && (\r\n        <Modal\r\n          size=\"lg\"\r\n          show={modalShow}\r\n          onHide={() => setModalShow(false)}\r\n          centered\r\n          transparent={true}\r\n          dialogClassName=\"transactions-modal\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>{description.title}</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <h6>\r\n              <strong>Description :</strong>\r\n            </h6>\r\n            {description.description}\r\n            <Gap height={10} />\r\n\r\n            <h6>\r\n              <strong>Price :</strong>\r\n            </h6>\r\n            <div className=\"transaction-price-color\">\r\n              <NumberFormat\r\n                value={description.price}\r\n                displayType={\"text\"}\r\n                thousandSeparator={true}\r\n                prefix={\"Rp, \"}\r\n                renderText={(value) => <span>{value}</span>}\r\n              />\r\n            </div>\r\n\r\n            <Gap height={15} />\r\n            <Modal.Footer>\r\n              {key === \"offer\" ? (\r\n                <div>\r\n                  {description.status === \"canceled\" ||\r\n                  description.status === \"success\" ? (\r\n                    <Button\r\n                      className=\"transaction-ok-btn\"\r\n                      variant=\"info\"\r\n                      onClick={() => setModalShow(false)}\r\n                    >\r\n                      Close\r\n                    </Button>\r\n                  ) : description.status === \"waiting approval\" ? (\r\n                    <div>\r\n                      <Button\r\n                        className=\"transaction-ok-btn\"\r\n                        variant=\"danger\"\r\n                        onClick={() => handleCancel(description.id)}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                      <Button\r\n                        className=\"transaction-ok-btn\"\r\n                        variant=\"success\"\r\n                        onClick={() => handleApprove(description.id)}\r\n                      >\r\n                        Approve\r\n                      </Button>\r\n                    </div>\r\n                  ) : description.status === \"waiting approved project\" ? (\r\n                    <Button\r\n                      className=\"transaction-send-btn\"\r\n                      variant=\"success\"\r\n                      onClick={() => toViewProject(description.id)}\r\n                    >\r\n                      View Project\r\n                    </Button>\r\n                  ) : description.status === \"on going progress\" ? (\r\n                    <Button\r\n                      className=\"transaction-send-btn\"\r\n                      variant=\"info\"\r\n                      onClick={() => toAddProject(description.id)}\r\n                    >\r\n                      Send Project\r\n                    </Button>\r\n                  ) : null}\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  {description.status === \"canceled\" ||\r\n                  description.status === \"success\" ||\r\n                  description.status === \"on going progress\" ? (\r\n                    <Button\r\n                      className=\"transaction-ok-btn\"\r\n                      variant=\"info\"\r\n                      onClick={() => setModalShow(false)}\r\n                    >\r\n                      Close\r\n                    </Button>\r\n                  ) : description.status === \"waiting approval\" ? (\r\n                    <div>\r\n                      <Button\r\n                        className=\"transaction-ok-btn-cancel\"\r\n                        variant=\"danger\"\r\n                        onClick={() => handleCancel(description.id)}\r\n                      >\r\n                        Cancel Order\r\n                      </Button>\r\n                      <Button\r\n                        className=\"transaction-ok-btn\"\r\n                        variant=\"info\"\r\n                        onClick={() => setModalShow(false)}\r\n                      >\r\n                        Close\r\n                      </Button>\r\n                    </div>\r\n                  ) : description.status === \"project completed\" ||\r\n                    description.status === \"waiting approved project\" ? (\r\n                    <Button\r\n                      className=\"transaction-send-btn\"\r\n                      variant=\"success\"\r\n                      onClick={() => setModalShow(false)}\r\n                    >\r\n                      View Project\r\n                    </Button>\r\n                  ) : null}\r\n                </div>\r\n              )}\r\n            </Modal.Footer>\r\n          </Modal.Body>\r\n        </Modal>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Transaction;\r\n","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\Hired\\index.js",[],"D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\AddProject\\index.js",["196","197"],"import { useState, useCallback } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Image } from \"cloudinary-react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\n//Config\r\nimport FormikControl from \"../../config/FormikControl\";\r\nimport { API, setAuthToken } from \"../../config/API\";\r\n\r\n//CSS\r\nimport \"./AddProject.scss\";\r\n\r\n//Components\r\nimport Header from \"../../components/molecules/Header\";\r\nimport Gap from \"../../components/atoms/Gap\";\r\nimport { ReactComponent as Cloud } from \"../../assets/logos/cloud.svg\";\r\n\r\nconst AddProject = (props) => {\r\n  const router = useHistory();\r\n  //Get UserInfo\r\n  const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  const token = localStorage.getItem(\"token\");\r\n  //State\r\n  const [cloudFiles, setCloudFiles] = useState([]);\r\n  //Modal\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [isLoading, setLoading] = useState(false);\r\n  //Alert\r\n  const [alertShow, setAlertShow] = useState(false);\r\n  //Initial State Formik\r\n  const initialValues = {\r\n    description: \"\",\r\n  };\r\n\r\n  //Schema validation form\r\n  const validationSchema = Yup.object({\r\n    description: Yup.string().min(5),\r\n  });\r\n\r\n  const handleSubmit = async (e) => {\r\n    const id = props.match.params.id;\r\n    const body = { transactionId: id, description: e.description };\r\n    try {\r\n      if (cloudFiles.length == 0) {\r\n        setAlertShow(true);\r\n      } else {\r\n        setAuthToken(token);\r\n        setAlertShow(false);\r\n        setLoading(true);\r\n\r\n        const resultProject = await API.post(\"/add-project\", body);\r\n        const projectId = resultProject.data.data.project.id;\r\n\r\n        cloudFiles.forEach(async (cloudFile) => {\r\n          const url = await cloudFile.secure_url;\r\n\r\n          const photos = { projectId: projectId, photo: url };\r\n          const saveToDb = await API.post(\"/add-project-image\", photos);\r\n\r\n          console.log(\"saveToDb\", saveToDb);\r\n        });\r\n\r\n        const data = { status: \"waiting approved project\" };\r\n        await API.patch(`/transaction/${id}`, data);\r\n\r\n        setLoading(false);\r\n        setModalShow(true);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const onDrop = useCallback(async (acceptedFiles) => {\r\n    acceptedFiles.forEach(async (acceptedFile) => {\r\n      setLoading(true);\r\n      const body = new FormData();\r\n      body.append(\"file\", acceptedFile);\r\n      body.append(\"upload_preset\", \"satriayud\");\r\n      const response = await fetch(\r\n        \"https://api.cloudinary.com/v1_1/satria-img/image/upload\",\r\n        {\r\n          method: \"post\",\r\n          body,\r\n        }\r\n      );\r\n      const data = await response.json();\r\n\r\n      setCloudFiles((old) => [...old, data]);\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    accepts: \"image/*\",\r\n    maxFiles: 5,\r\n  });\r\n\r\n  const toViewProject = (id) => {\r\n    setModalShow(false);\r\n    router.push(`/view-project/${id}`);\r\n  };\r\n\r\n  const toTransaction = () => {\r\n    setModalShow(false);\r\n    router.push(\"/transaction\");\r\n  };\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Header />\r\n      <Row className=\"addpost-container\">\r\n        <Col className=\"addpost-left-container\">\r\n          <Row className=\"addpost-image-upload\">\r\n            {isLoading ? (\r\n              <div className=\"dropzone\">\r\n                <Spinner animation=\"border\" variant=\"info\" />\r\n              </div>\r\n            ) : (\r\n              <div\r\n                {...getRootProps()}\r\n                className={`dropzone ${isDragActive ? \"active\" : null}`}\r\n              >\r\n                <input {...getInputProps()} />\r\n                <div className=\"add-post-upload\">\r\n                  <Cloud />\r\n                  <p className=\"add-post-browse\">\r\n                    <strong className=\"browse\">Browse</strong>&nbsp; to choose\r\n                    file\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Row>\r\n          <Gap height={20} />\r\n          <Row className=\"add-post-bottom-container\">\r\n            {isLoading ? (\r\n              <div className=\"add-post-preview-image\">\r\n                <Spinner animation=\"border\" variant=\"info\" />\r\n              </div>\r\n            ) : (\r\n              <div className=\"add-post-preview-image\">\r\n                {cloudFiles.map((file) => (\r\n                  <Image\r\n                    key={file.public_id}\r\n                    className=\"add-post-img\"\r\n                    cloudName=\"satria-img\"\r\n                    publicId={file.public_id}\r\n                    width=\"150\"\r\n                    crop=\"scale\"\r\n                  />\r\n                ))}\r\n              </div>\r\n            )}\r\n          </Row>\r\n        </Col>\r\n        <Col className=\"addpost-right-container\">\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(e) => handleSubmit(e)}\r\n          >\r\n            {(formik) => {\r\n              return (\r\n                <Form>\r\n                  <FormikControl\r\n                    className=\"form-textarea\"\r\n                    placeholder=\"Description\"\r\n                    control=\"textarea\"\r\n                    type=\"text\"\r\n                    name=\"description\"\r\n                  />\r\n                  {alertShow && (\r\n                    <Alert\r\n                      className=\"alert-add-post\"\r\n                      variant=\"warning\"\r\n                      onClose={() => setAlertShow(false)}\r\n                    >\r\n                      Please upload your post's photo\r\n                    </Alert>\r\n                  )}\r\n                  <div className=\"button-addpost-container\">\r\n                    <Button\r\n                      block\r\n                      variant=\"info\"\r\n                      type=\"submit\"\r\n                      disabled={!formik.isValid || isLoading}\r\n                    >\r\n                      {isLoading ? \"Loading…\" : \"Send Project\"}\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Modal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        centered\r\n        transparent={true}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title className=\"title-dialog\">\r\n            Project Successfully Submitted\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p className=\"confirms\">Go see your project's view ?</p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => toTransaction()}\r\n            className=\"btn-modal-add-project-ok\"\r\n          >\r\n            Nope\r\n          </Button>\r\n          <Button\r\n            variant=\"info\"\r\n            onClick={() => toViewProject(props.match.params.id)}\r\n            className=\"btn-modal-add-project-ok\"\r\n          >\r\n            Ok\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddProject;\r\n","D:\\Project-React\\DWF19RX7Z_waysgallery\\client\\src\\pages\\ViewProject\\index.js",["198","199","200","201"],"import { useState, useEffect } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Carousel from \"react-bootstrap/Carousel\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\n//CSS\r\nimport \"./ViewProject.scss\";\r\n\r\n//Config\r\nimport { API, setAuthToken } from \"../../config/API\";\r\n\r\n//Components\r\nimport Header from \"../../components/molecules/Header\";\r\n\r\nconst ViewProject = (props) => {\r\n  //State\r\n  const [transactionData, setTransactionData] = useState(undefined);\r\n  const [indexCarousel, setIndexCarousel] = useState(0);\r\n  const [dataTransaction, setDataTransaction] = useState(undefined);\r\n  const [selectImage, setSelectImage] = useState(\"\");\r\n\r\n  //Modal\r\n  const [modalShow, setModalShow] = useState(false);\r\n\r\n  const userLogin = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const transactionId = props.match.params.id;\r\n\r\n  const getProject = async () => {\r\n    try {\r\n      setAuthToken(token);\r\n      const projectInfo = await API.get(`/project/${transactionId}`);\r\n      setTransactionData(projectInfo.data.data.project);\r\n\r\n      const transactionOrder = await API.get(\r\n        `/transactions-order-project/${transactionId}`\r\n      );\r\n      setDataTransaction(transactionOrder.data.data.transactions[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getProject();\r\n  }, []);\r\n\r\n  const handleSelect = (selectedIndex, e) => {\r\n    setIndexCarousel(selectedIndex);\r\n  };\r\n\r\n  const handleAccept = async () => {\r\n    const body = { status: \"completed\" };\r\n    await API.patch(`/transaction/${transactionId}`, body);\r\n    getProject();\r\n  };\r\n\r\n  const previewImage = (image) => {\r\n    setModalShow(true);\r\n    setSelectImage(image);\r\n  };\r\n\r\n  const download = () => {\r\n    let element = document.createElement(\"a\");\r\n    let file = new Blob([selectImage], { type: \"image/*\" });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"project.jpg\";\r\n    element.click();\r\n  };\r\n\r\n  return transactionData == undefined || dataTransaction == undefined ? (\r\n    <p>Loading...</p>\r\n  ) : (\r\n    <Container fluid>\r\n      <Header />\r\n      <Row>\r\n        <Col className=\"view-project-left-container\">\r\n          <Row className=\"view-project-carousel-container\">\r\n            <Carousel activeIndex={indexCarousel} onSelect={handleSelect}>\r\n              {transactionData[0].images.map((image) => (\r\n                <Carousel.Item>\r\n                  <img\r\n                    className=\"d-block\"\r\n                    src={image.photo}\r\n                    alt=\"First slide\"\r\n                    onClick={() => previewImage(image.photo)}\r\n                  />\r\n                </Carousel.Item>\r\n              ))}\r\n            </Carousel>\r\n          </Row>\r\n\r\n          <Row>\r\n            {transactionData[0].images.map((image, index) => (\r\n              <img\r\n                onClick={() => setIndexCarousel(index)}\r\n                className=\"view-project-img-list\"\r\n                src={image.photo}\r\n                alt=\"images-list\"\r\n                style={{\r\n                  border: indexCarousel == index && \"3px solid #15a3b9\",\r\n                }}\r\n              />\r\n            ))}\r\n          </Row>\r\n        </Col>\r\n        <Col className=\"view-project-right-container\">\r\n          <Row>{transactionData[0].description}</Row>\r\n          <Row>\r\n            {dataTransaction.orderBy === userLogin.id &&\r\n            dataTransaction.status === \"waiting approved project\" ? (\r\n              <Button\r\n                onClick={() => handleAccept()}\r\n                className=\"view-project-btn-accept\"\r\n                variant=\"info\"\r\n              >\r\n                Accept Project\r\n              </Button>\r\n            ) : null}\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Modal\r\n        size=\"lg\"\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        centered\r\n        transparent={true}\r\n        dialogClassName=\"transactions-modal\"\r\n      >\r\n        <Modal.Header closeButton></Modal.Header>\r\n        <Modal.Body>\r\n          <img\r\n            className=\"modal-preview-image\"\r\n            src={selectImage}\r\n            alt=\"img-preview\"\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"footer-view-project\">\r\n          <Button onClick={() => download()} variant=\"success\">\r\n            Download\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ViewProject;\r\n",{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","severity":1,"message":"207","line":46,"column":6,"nodeType":"208","endLine":46,"endColumn":8,"suggestions":"209"},{"ruleId":"210","severity":1,"message":"211","line":122,"column":17,"nodeType":"212","endLine":122,"endColumn":66},{"ruleId":"213","severity":1,"message":"214","line":18,"column":15,"nodeType":"215","messageId":"216","endLine":18,"endColumn":27},{"ruleId":"213","severity":1,"message":"217","line":30,"column":9,"nodeType":"215","messageId":"216","endLine":30,"endColumn":14},{"ruleId":"213","severity":1,"message":"218","line":33,"column":10,"nodeType":"215","messageId":"216","endLine":33,"endColumn":13},{"ruleId":"213","severity":1,"message":"219","line":33,"column":15,"nodeType":"215","messageId":"216","endLine":33,"endColumn":21},{"ruleId":"213","severity":1,"message":"220","line":35,"column":10,"nodeType":"215","messageId":"216","endLine":35,"endColumn":20},{"ruleId":"213","severity":1,"message":"221","line":35,"column":22,"nodeType":"215","messageId":"216","endLine":35,"endColumn":35},{"ruleId":"213","severity":1,"message":"222","line":36,"column":10,"nodeType":"215","messageId":"216","endLine":36,"endColumn":15},{"ruleId":"213","severity":1,"message":"223","line":36,"column":17,"nodeType":"215","messageId":"216","endLine":36,"endColumn":25},{"ruleId":"206","severity":1,"message":"224","line":75,"column":6,"nodeType":"208","endLine":75,"endColumn":8,"suggestions":"225"},{"ruleId":"226","severity":1,"message":"227","line":85,"column":19,"nodeType":"228","messageId":"229","endLine":85,"endColumn":21},{"ruleId":"213","severity":1,"message":"230","line":88,"column":15,"nodeType":"215","messageId":"216","endLine":88,"endColumn":17},{"ruleId":"231","severity":1,"message":"232","line":188,"column":17,"nodeType":"212","endLine":192,"endColumn":19},{"ruleId":"213","severity":1,"message":"233","line":6,"column":5,"nodeType":"215","messageId":"216","endLine":6,"endColumn":19},{"ruleId":"202","replacedBy":"234"},{"ruleId":"204","replacedBy":"235"},{"ruleId":"206","severity":1,"message":"236","line":34,"column":6,"nodeType":"208","endLine":34,"endColumn":8,"suggestions":"237"},{"ruleId":"226","severity":1,"message":"227","line":44,"column":16,"nodeType":"228","messageId":"229","endLine":44,"endColumn":18},{"ruleId":"238","severity":1,"message":"239","line":51,"column":27,"nodeType":"240","messageId":"241","endLine":51,"endColumn":29},{"ruleId":"238","severity":1,"message":"239","line":74,"column":27,"nodeType":"240","messageId":"241","endLine":74,"endColumn":29},{"ruleId":"213","severity":1,"message":"242","line":4,"column":8,"nodeType":"215","messageId":"216","endLine":4,"endColumn":11},{"ruleId":"213","severity":1,"message":"243","line":19,"column":9,"nodeType":"215","messageId":"216","endLine":19,"endColumn":13},{"ruleId":"213","severity":1,"message":"244","line":24,"column":10,"nodeType":"215","messageId":"216","endLine":24,"endColumn":16},{"ruleId":"213","severity":1,"message":"245","line":24,"column":18,"nodeType":"215","messageId":"216","endLine":24,"endColumn":27},{"ruleId":"206","severity":1,"message":"246","line":40,"column":6,"nodeType":"208","endLine":40,"endColumn":8,"suggestions":"247"},{"ruleId":"226","severity":1,"message":"227","line":42,"column":15,"nodeType":"228","messageId":"229","endLine":42,"endColumn":17},{"ruleId":"248","severity":1,"message":"249","line":43,"column":5,"nodeType":"212","endLine":43,"endColumn":9},{"ruleId":"206","severity":1,"message":"250","line":36,"column":6,"nodeType":"208","endLine":36,"endColumn":8,"suggestions":"251"},{"ruleId":"226","severity":1,"message":"227","line":71,"column":19,"nodeType":"228","messageId":"229","endLine":71,"endColumn":21},{"ruleId":"226","severity":1,"message":"252","line":96,"column":24,"nodeType":"228","messageId":"229","endLine":96,"endColumn":26},{"ruleId":"213","severity":1,"message":"242","line":4,"column":8,"nodeType":"215","messageId":"216","endLine":4,"endColumn":11},{"ruleId":"213","severity":1,"message":"253","line":17,"column":11,"nodeType":"215","messageId":"216","endLine":17,"endColumn":14},{"ruleId":"206","severity":1,"message":"254","line":24,"column":6,"nodeType":"208","endLine":24,"endColumn":8,"suggestions":"255"},{"ruleId":"231","severity":1,"message":"232","line":30,"column":11,"nodeType":"212","endLine":34,"endColumn":13},{"ruleId":"213","severity":1,"message":"256","line":9,"column":21,"nodeType":"215","messageId":"216","endLine":9,"endColumn":33},{"ruleId":"213","severity":1,"message":"257","line":7,"column":8,"nodeType":"215","messageId":"216","endLine":7,"endColumn":13},{"ruleId":"213","severity":1,"message":"258","line":17,"column":8,"nodeType":"215","messageId":"216","endLine":17,"endColumn":17},{"ruleId":"206","severity":1,"message":"259","line":43,"column":6,"nodeType":"208","endLine":43,"endColumn":8,"suggestions":"260"},{"ruleId":"226","severity":1,"message":"227","line":79,"column":19,"nodeType":"228","messageId":"229","endLine":79,"endColumn":21},{"ruleId":"210","severity":1,"message":"211","line":86,"column":11,"nodeType":"212","endLine":86,"endColumn":70},{"ruleId":"226","severity":1,"message":"227","line":95,"column":24,"nodeType":"228","messageId":"229","endLine":95,"endColumn":26},{"ruleId":"226","severity":1,"message":"227","line":138,"column":33,"nodeType":"228","messageId":"229","endLine":138,"endColumn":35},{"ruleId":"226","severity":1,"message":"227","line":152,"column":31,"nodeType":"228","messageId":"229","endLine":152,"endColumn":33},{"ruleId":"213","severity":1,"message":"261","line":8,"column":8,"nodeType":"215","messageId":"216","endLine":8,"endColumn":17},{"ruleId":"226","severity":1,"message":"227","line":99,"column":27,"nodeType":"228","messageId":"229","endLine":99,"endColumn":29},{"ruleId":"213","severity":1,"message":"262","line":18,"column":28,"nodeType":"215","messageId":"216","endLine":18,"endColumn":36},{"ruleId":"213","severity":1,"message":"263","line":21,"column":8,"nodeType":"215","messageId":"216","endLine":21,"endColumn":11},{"ruleId":"213","severity":1,"message":"264","line":25,"column":10,"nodeType":"215","messageId":"216","endLine":25,"endColumn":15},{"ruleId":"213","severity":1,"message":"265","line":25,"column":17,"nodeType":"215","messageId":"216","endLine":25,"endColumn":25},{"ruleId":"213","severity":1,"message":"243","line":27,"column":9,"nodeType":"215","messageId":"216","endLine":27,"endColumn":13},{"ruleId":"206","severity":1,"message":"236","line":52,"column":6,"nodeType":"208","endLine":52,"endColumn":8,"suggestions":"266"},{"ruleId":"226","severity":1,"message":"227","line":54,"column":29,"nodeType":"228","messageId":"229","endLine":54,"endColumn":31},{"ruleId":"213","severity":1,"message":"267","line":4,"column":8,"nodeType":"215","messageId":"216","endLine":4,"endColumn":11},{"ruleId":"213","severity":1,"message":"242","line":5,"column":8,"nodeType":"215","messageId":"216","endLine":5,"endColumn":11},{"ruleId":"213","severity":1,"message":"268","line":35,"column":10,"nodeType":"215","messageId":"216","endLine":35,"endColumn":19},{"ruleId":"213","severity":1,"message":"269","line":35,"column":21,"nodeType":"215","messageId":"216","endLine":35,"endColumn":31},{"ruleId":"206","severity":1,"message":"270","line":62,"column":6,"nodeType":"208","endLine":62,"endColumn":8,"suggestions":"271"},{"ruleId":"226","severity":1,"message":"227","line":99,"column":21,"nodeType":"228","messageId":"229","endLine":99,"endColumn":23},{"ruleId":"226","severity":1,"message":"227","line":99,"column":48,"nodeType":"228","messageId":"229","endLine":99,"endColumn":50},{"ruleId":"226","severity":1,"message":"227","line":122,"column":32,"nodeType":"228","messageId":"229","endLine":122,"endColumn":34},{"ruleId":"226","severity":1,"message":"227","line":203,"column":32,"nodeType":"228","messageId":"229","endLine":203,"endColumn":34},{"ruleId":"226","severity":1,"message":"252","line":297,"column":20,"nodeType":"228","messageId":"229","endLine":297,"endColumn":22},{"ruleId":"213","severity":1,"message":"243","line":30,"column":9,"nodeType":"215","messageId":"216","endLine":30,"endColumn":13},{"ruleId":"226","severity":1,"message":"227","line":53,"column":29,"nodeType":"228","messageId":"229","endLine":53,"endColumn":31},{"ruleId":"206","severity":1,"message":"272","line":50,"column":6,"nodeType":"208","endLine":50,"endColumn":8,"suggestions":"273"},{"ruleId":"226","severity":1,"message":"227","line":75,"column":26,"nodeType":"228","messageId":"229","endLine":75,"endColumn":28},{"ruleId":"226","severity":1,"message":"227","line":75,"column":58,"nodeType":"228","messageId":"229","endLine":75,"endColumn":60},{"ruleId":"226","severity":1,"message":"227","line":105,"column":41,"nodeType":"228","messageId":"229","endLine":105,"endColumn":43},"no-native-reassign",["274"],"no-negated-in-lhs",["275"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.","ArrayExpression",["276"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'setAuthToken' is defined but never used.","Identifier","unusedVar","'token' is assigned a value but never used.","'art' is assigned a value but never used.","'setArt' is assigned a value but never used.","'previewArt' is assigned a value but never used.","'setPreviewArt' is assigned a value but never used.","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'user.id'. Either include it or remove the dependency array.",["277"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'db' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'fileRejections' is assigned a value but never used.",["274"],["275"],"React Hook useEffect has a missing dependency: 'getPosts'. Either include it or remove the dependency array.",["278"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Col' is defined but never used.","'user' is assigned a value but never used.","'avatar' is assigned a value but never used.","'setAvatar' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getDetailPost'. Either include it or remove the dependency array.",["279"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","React Hook useEffect has missing dependencies: 'getUser' and 'props.User.id'. Either include them or remove the dependency array.",["280"],"Expected '!==' and instead saw '!='.","'get' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getListPhotos'. Either include it or remove the dependency array.",["281"],"'setStartDate' is assigned a value but never used.","'axios' is defined but never used.","'Jumbotron' is defined but never used.","React Hook useEffect has missing dependencies: 'getUser' and 'props.match.params.id'. Either include them or remove the dependency array.",["282"],"'ModalBody' is defined but never used.","'ComboBox' is defined but never used.","'Gap' is defined but never used.","'state' is assigned a value but never used.","'dispatch' is assigned a value but never used.",["283"],"'Row' is defined but never used.","'isLoading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getTransactions'. Either include it or remove the dependency array.",["284"],"React Hook useEffect has a missing dependency: 'getProject'. Either include it or remove the dependency array.",["285"],"no-global-assign","no-unsafe-negation",{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"290","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},"Update the dependencies array to be: [getUser]",{"range":"305","text":"306"},"Update the dependencies array to be: [user.id]",{"range":"307","text":"308"},"Update the dependencies array to be: [getPosts]",{"range":"309","text":"310"},"Update the dependencies array to be: [getDetailPost]",{"range":"311","text":"312"},"Update the dependencies array to be: [getUser, props.User.id]",{"range":"313","text":"314"},"Update the dependencies array to be: [getListPhotos]",{"range":"315","text":"316"},"Update the dependencies array to be: [getUser, props.match.params.id]",{"range":"317","text":"318"},{"range":"319","text":"310"},"Update the dependencies array to be: [getTransactions]",{"range":"320","text":"321"},"Update the dependencies array to be: [getProject]",{"range":"322","text":"323"},[1470,1472],"[getUser]",[2443,2445],"[user.id]",[968,970],"[getPosts]",[1098,1100],"[getDetailPost]",[939,941],"[getUser, props.User.id]",[631,633],"[getListPhotos]",[1351,1353],"[getUser, props.match.params.id]",[1564,1566],[2180,2182],"[getTransactions]",[1533,1535],"[getProject]"]